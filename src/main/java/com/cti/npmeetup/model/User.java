package com.cti.npmeetup.model;

import java.util.*;

import java.time.ZonedDateTime;
import java.time.ZoneId;

import jakarta.persistence.*;

import com.fasterxml.jackson.annotation.JsonIgnore;

import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;

import com.cti.npmeetup.enums.UserStatus;
import com.cti.npmeetup.util.AppConstants;

/**
 * User model
 *
 * @author Francisco Franco
 * @version %I%, %G%
 * @since 1.0
 */

@Entity
@Table(name = "users")
public class User {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "user_id")
	private Long id;

	@Column(name = "first_name", nullable = false)
	@NotEmpty(message = "First name is required")
	private String firstName;
	
	@Column(name = "last_name", nullable = false)
	@NotEmpty(message = "Last name is required")
	private String lastName;
	
	@Column(name = "password", nullable = false)
	@Length(min = 5, message = "*Your password must have at least 5 characters")
	@NotEmpty(message = "*Please provide your password")
	private String password;
	
	@Column(name = "email", unique = true, nullable = false)
	@Email(message = "*Please provide a valid Email")
	@NotEmpty(message = "*Please provide an email")
	private String email;

	@Column(name = "mobile_number", nullable = false)
	@NotEmpty(message = "Mobile number is required")
	private String mobileNumber;
	
	@Column(name = "status", nullable = false, length = 20)
	@Enumerated(EnumType.STRING)
	private UserStatus userStatus;
	
	@Column(name = "created_at", nullable = false, updatable = false)
	//@Temporal(TemporalType.TIMESTAMP)
	//private Date createdAt;
	//private Instant createdAt;
	private ZonedDateTime createdAt;
	
	@Column(name = "updated_at")
	//@Temporal(TemporalType.TIMESTAMP)
	//private Date updatedAt;
	//private Instant updatedAt;
	private ZonedDateTime updatedAt;
	
	// ===================
	// Constructor(s)
	// ===================
	
	// No argument constructor
	public User() {}
	
	// Use this constructor for mock testing only since id is auto-generated by database
	public User(Long id, String firstName, String lastName, String password, String email, String mobileNumber, UserStatus userStatus) {
		this.id = id;
		this.firstName = firstName;
		this.lastName = lastName;
		this.password = password;
		this.email = email;
		this.mobileNumber = mobileNumber;
		this.userStatus = userStatus;
	}
	
	// ===================
	// Protected methods
	// ===================
	
	@PrePersist
	protected void onCreate() {
		//createdAt = updatedAt = new Date();
		//Instant now = Instant.now(); // UTC timestamp
		//createdAt = updatedAt = now;
		ZonedDateTime now = ZonedDateTime.now(ZoneId.of(AppConstants.TIME_ZONE));
		createdAt = updatedAt = now;
	}
	
	@PreUpdate
	protected void onUpdate() {
		//updatedAt = new Date();
		//updatedAt = Instant.now(); // UTC timestamp
		updatedAt = ZonedDateTime.now(ZoneId.of(AppConstants.TIME_ZONE));
	}
	
	// ===================
	// Public methods
	// ===================
	
	public Long getId() {
		return id;
	}
	
	public void setId(Long id) {
		this.id = id;
	}
	
	public String getFirstName() {
		return firstName;
	}
	
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}
	
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getEmail() {
		return email;
	}
	
	public void setEmail(String email) {
		this.email = email;
	}

	public String getMobileNumber() {
		return mobileNumber;
	}
	
	public void setMobileNumber(String mobileNumber) {
		this.mobileNumber = mobileNumber;
	}
	
	public String getPassword() {
		return password;
	}
	
	public void setPassword(String password) {
		this.password = password;
	}
	
	public UserStatus getUserStatus() {
		return userStatus;
	}
	
	public void setUserStatus(UserStatus userStatus) {
		this.userStatus = userStatus;
	}
	
	public ZonedDateTime getCreatedAt() {
		return createdAt;
	}
	
	public void setCreatedAt(ZonedDateTime createdAt) {
		this.createdAt = createdAt;
	}
	
	public ZonedDateTime getUpdatedAt() {
		return updatedAt;
	}
	
	public void setUpdatedAt(ZonedDateTime updatedAt) {
		this.updatedAt = updatedAt;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		
		User user = (User) o;
		
		return id.equals(user.id);
	}
	
	@Override
	public int hashCode() {
		return id.hashCode();
	}

	@Override
	public String toString() {
		return "User [id=" + id 
			+ ", firstName=" + firstName
			+ ", lastName=" + lastName
			//+ ", password=" + password
			+ ", email=" + email 
			+ ", mobileNumber=" + mobileNumber 
			+ ", userStatus=" + (userStatus != null ? userStatus.toString() : "null")
			+ ", createdAt=" + createdAt 
			+ ", updatedAt=" + updatedAt 
			+ "]";
	}
}
