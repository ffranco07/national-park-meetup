package com.cti.npmeetup.model;

import java.time.ZonedDateTime;
import java.time.ZoneId;

import jakarta.persistence.*;

import com.cti.npmeetup.util.AppConstants;

/**
 * User location model
 *
 * @author Francisco Franco
 * @version %I%, %G%
 * @since 1.0
 */

@Entity
@Table(name = "user_location")
public class UserLocation {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "user_location_id")
	private Long id; // Primary key for this table
	
	@ManyToOne
	@JoinColumn(name = "user_id", referencedColumnName = "user_id", nullable = false)
	private User user; // Foreign key: Many UserLocation records can reference the same User

	@ManyToOne
	@JoinColumn(name = "location_id", referencedColumnName = "location_id", nullable = false)
	private Location location; // Foreign key: Many UserLocation records can reference the same Location

	@Column(name = "updated_at")
	private ZonedDateTime updatedAt;

	// ===================
	// Constructor(s)
	// ===================

	public UserLocation() {}

	// Use this constructor for mock testing only since id is auto-generated by database
	public UserLocation(Long id, User user, Location location) {
		this.id = id;
		this.user = user;
		this.location = location;
	}
	
	// ===================
	// Protected methods
	// ===================
	
	@PrePersist
	protected void onCreate() {
		updatedAt = ZonedDateTime.now(ZoneId.of(AppConstants.TIME_ZONE));
	}

	// ===================
	// Public methods
	// ===================

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}
	
	public Location getLocation() {
		return location;
	}

	public void setLocation(Location location) {
		this.location = location;
	}

	public ZonedDateTime getUpdatedAt() {
		return updatedAt;
	}

	public void setUpdatedAt(ZonedDateTime updatedAt) {
		this.updatedAt = updatedAt;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		
		UserLocation userLocation = (UserLocation) o;
		
		return id.equals(userLocation.id);
	}
	
	@Override
	public int hashCode() {
		return id.hashCode();
	}
	
	@Override
	public String toString() {
		return "UserLocation [id=" + id
			+ ", user=" + user
			+ ", location=" + location
			+ ", updatedAt=" + updatedAt
			+ "]";
	}
}
